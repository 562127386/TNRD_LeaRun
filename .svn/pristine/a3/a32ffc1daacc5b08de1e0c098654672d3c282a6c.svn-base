using Learun.Util;
using System;
using System.Data;
using System.Collections.Generic;
using System.Collections;
using System.Linq;

namespace Wizsen_TNRD_EnergyProject.Wizsen_TNRD_Project
{
    /// <summary> 
    /// 版 本 Learun-ADMS V7.0.0 力软敏捷开发框架 
    /// Copyright (c) 2013-2018 上海力软信息技术有限公司 
    /// 创 建：超级管理员 
    /// 日 期：2019-02-26 17:56 
    /// 描 述：项目管理 
    /// </summary> 
    public class ProjectDatailsBLL : ProjectDatailsIBLL
    {
        private ProjectDatailsService projectDatailsService = new ProjectDatailsService();

        #region 获取数据 

        /// <summary> 
        /// 获取列表数据 
        /// <summary> 
        /// <returns></returns> 
        public IEnumerable<TNRD_Project_DatailsEntity> GetList(string queryJson)
        {
            try
            {
                return projectDatailsService.GetList(queryJson);
            }
            catch (Exception ex)
            {
                if (ex is ExceptionEx)
                {
                    throw;
                }
                else
                {
                    throw ExceptionEx.ThrowBusinessException(ex);
                }
            }
        }

        /// <summary>
        /// 获取项目树形数据
        /// </summary>
        /// <returns></returns>
        public List<TreeModel> GetProjectTree()
        {
            try
            {
                var ProjectList = projectDatailsService.GetList(null);
                List<TreeModel> treeList_dept = new List<TreeModel>();
                List<TreeModel> tree_list_year = new List<TreeModel>();
                //获取项目所属部门，去除重复
                Hashtable ht_dept = new Hashtable();
                foreach (TNRD_Project_DatailsEntity item in ProjectList)
                {
                    if (!ht_dept.ContainsKey(item.Dept_Code))
                    {
                        //根据部门获取年份
                        var yearList = ProjectList.ToList().Where(u => u.Dept_Code == item.Dept_Code);
                        Hashtable ht_year = new Hashtable();
                        foreach (var item_year in yearList)
                        {
                            var year_single = item_year.Date.ToDate().Year.ToString();
                            if (!ht_year.ContainsKey(year_single))
                            {
                                TreeModel node_year = new TreeModel();
                                node_year.id = item.Dept_Code;
                                node_year.text = item.Dept_Name;
                                node_year.value = item.Dept_Name;
                                node_year.hasChildren = true;
                                tree_list_year.Add(node_year);
                            }
                        }
                        ht_dept.Add(item.Dept_Code, item.Dept_Name);
                        TreeModel node_dept = new TreeModel();
                        node_dept.id = item.Dept_Code;
                        node_dept.text = item.Dept_Name;
                        node_dept.value = item.Dept_Name;
                        node_dept.hasChildren = true;
                        node_dept.ChildNodes = tree_list_year;
                        treeList_dept.Add(node_dept);



                    }
                }


                foreach (TNRD_Project_DatailsEntity item in ProjectList)
                {
                    TreeModel node = new TreeModel();
                    node.id = item.Date.ToDate().Year.ToString();//立项年份
                    node.text = item.Date.ToDate().Year.ToString();//立项年份
                    node.value = item.Date.ToDate().Year.ToString();//立项年份
                    node.showcheck = false;
                    node.checkstate = 0;
                    node.isexpand = false;
                    node.parentId = "0";
                    node.title = item.Date.ToDate().Year.ToString();//立项年份
                    node.hasChildren = true;
                    treeList_dept.Add(node);
                    TreeModel node_dept = new TreeModel();
                    bool hasChildren = true;
                    node.id = item.Id;
                    node.text = item.Name;
                    node.value = item.Code;
                    node.showcheck = false;
                    node.checkstate = 0;
                    node.isexpand = false;
                    node.parentId = "0";
                    node.title = item.Date.ToDate().Year.ToString();//立项年份
                    node.hasChildren = hasChildren;
                    treeList.Add(node);
                }
                foreach (TNRD_Project_DatailsEntity item in ProjectList)
                {
                    TreeModel node = new TreeModel();
                    bool hasChildren = false;
                    node.id = item.Id;
                    node.text = item.Name;
                    node.value = item.Code;
                    node.showcheck = false;
                    node.checkstate = 0;
                    node.isexpand = false;
                    node.parentId = "0";
                    node.title = item.Date.ToDate().Year.ToString();//立项年份
                    node.hasChildren = hasChildren;
                    treeList.Add(node);
                }
                return treeList.ToTree();
            }
            catch (Exception ex)
            {
                if (ex is ExceptionEx)
                {
                    throw;
                }
                else
                {
                    throw ExceptionEx.ThrowBusinessException(ex);
                }
            }
        }


        /// <summary> 
        /// 获取列表分页数据 
        /// <param name="pagination">分页参数</param> 
        /// <summary> 
        /// <returns></returns> 
        public DataTable GetPageList(Pagination pagination, string queryJson)
        {
            try
            {
                return projectDatailsService.GetPageList(pagination, queryJson);
            }
            catch (Exception ex)
            {
                if (ex is ExceptionEx)
                {
                    throw;
                }
                else
                {
                    throw ExceptionEx.ThrowBusinessException(ex);
                }
            }
        }

        /// <summary> 
        /// 获取实体数据 
        /// <param name="keyValue">主键</param> 
        /// <summary> 
        /// <returns></returns> 
        public TNRD_Project_DatailsEntity GetEntity(string keyValue)
        {
            try
            {
                return projectDatailsService.GetEntity(keyValue);
            }
            catch (Exception ex)
            {
                if (ex is ExceptionEx)
                {
                    throw;
                }
                else
                {
                    throw ExceptionEx.ThrowBusinessException(ex);
                }
            }
        }

        #endregion

        #region 提交数据 

        /// <summary> 
        /// 删除实体数据 
        /// <param name="keyValue">主键</param> 
        /// <summary> 
        /// <returns></returns> 
        public void DeleteEntity(string keyValue)
        {
            try
            {
                projectDatailsService.DeleteEntity(keyValue);
            }
            catch (Exception ex)
            {
                if (ex is ExceptionEx)
                {
                    throw;
                }
                else
                {
                    throw ExceptionEx.ThrowBusinessException(ex);
                }
            }
        }

        /// <summary> 
        /// 保存实体数据（新增、修改） 
        /// <param name="keyValue">主键</param> 
        /// <summary> 
        /// <returns></returns> 
        public void SaveEntity(string keyValue, TNRD_Project_DatailsEntity entity)
        {
            try
            {
                projectDatailsService.SaveEntity(keyValue, entity);
            }
            catch (Exception ex)
            {
                if (ex is ExceptionEx)
                {
                    throw;
                }
                else
                {
                    throw ExceptionEx.ThrowBusinessException(ex);
                }
            }
        }



        #endregion

    }
}